
Visual Studio productivity tips:
1. Ctrl + k + k to create the book mark so that in future we can check where we left.
2. code snippet: shortcuts to write the code like for loop by writing only (for + tab key)
       1. ctor - for constructor.
	   2. prop - to write the auto implemented properties.
	   3. try - for try catch block.
3. Ctrl + tab to go to any open file.
4. alt + w + L to close all open tabs.
5. ctrl + , - to open any file by search class, method name. 	
6. Shift + alt + Enter - for full screen the current tab.	
7. ctrl + m + m - to collapse the block of code.	
8. ctrl + f5 to run the application.
9. f5 to run the app in debug mode. 	
10. f9 - to insert the break point. 
11. shift + f11 - to step out from the method in the debug mode.	
12. shift + f5 to stop the debug mode.	

	
Visual studio code short cuts

1. Code . - to open the project
2. Ctrl + p - open file
3. @ - find function in a file 
4. # - find function in a workspace
5. @: sort the function and then find
6. ctrl + D to select the next word
7. Ctrl + shift + L - to select multiple cursor for the same word or ctrl + f2
8. alt + up - multi cursor
9. Ctrl + shift + up to copy up and down for copy down
10. ctrl + U - for last position of cursor
11. alt + up and down to move the code
12. Format the portion - ctrl + K + Ctrl + F.
13. format the whole document - alt + shift + F
14. Ctrl + , - open user settings
15. Ctrl + P + P - to toggle/move between the files
16. Ctrl + K - to dock the file
17. ctrl + Shift + K - delete the line.
18. ! then enter it will give the basic structure of html.

npm

1. Npm init to create the package.json
   > npm init -y - create package.json with the default values.
2. ^ - it will update the minor and patch version 
3. 4.2.1 - 4> major, 2> minor, 1> patch version
4. ~ - it will update the patch version
5. "*" - All 
6. nothing in front of version will update nothing when npm install.
7. npm list --depth 0 - for get local package
8. npm list --global true --depth 0 - for get global package
9. npm update - for update package
   > npm update <package name>
   > npm update -g - for update global package
10. npm help - for help
    > npm <cmd> -h for help
	
11. npm install npm @latest -g - for update npm
12. Extaneous package - which are in node module but not in the package.json.
13. remove Extaneous package - npm prune
14. npm i <package name> -D - to install dev dependency


NVM - node version manager is used to use the different version of node.



React concepts
In vanilla js we have to create the html element by code like create element and in react by just as a html element we can create our component.

> npx create-react-app my app to create the react app.

> by using npm - you have to first install the create-react-app package 

> once you run npm start - then index.html file render on the browser which have root dom then control pass to the index.js and in that root dom we show app component.

> component is a part of the user interface.
> default export - you can import that by any name
export default Greet;

> named export - you have to import it by the same name.

1. props pass from the component and are immutable(can't be change). It is an object.
   in functional component pass as a parameter
   <comp myprop="prop h y"/>
   
   function Greet(props){
  
   }
   
  > and in class we find the props in this.props.
2. State maintained in the component and can be changed
   usestate in functional component
   this.state in class component.

3. to rerender the state on the ui use setstate and this.state in the constructor.
4. always write the code after setstate in call back as it not have the updated value of state as it runs before the setstate.
5. To use the lastupdated state we need to pass the function in the setstate method
6. const {props1, props2} = this.props. for destructring props and state
7. this keyword get undefined in the case of eventhandler so we use the event binding to fix this issue
8. > 1st approach is for event handler - bind(performance issue)
   > 2nd is call the function in render using the arrow(performance issue)
   > 3rd eventhandler in the render and bind in constructor.(best approach)
   > 4th eventhandler then declare the function using the arrow function(good approach)
   
9. Ways to apply css to the react component:
  > CSS StyleSheet - 
     > using regular stylesheet 
	 > using ternary operator on the basis of props and state
	 > using the template literals
  >InLine  CSS.
     > create an object and apply using the style attribute
  > Module CSS
     > create a module.css file and import using styles attribute
	 > useful becuase it not inherit in the child component
	 
	 
10. Pass methods in props from parent to child and if you want to send something from child to parent then we can pass it in that function.

11. Conditional rendering - four ways - if else , by create a variable, ternary operator, by and or operator(short circuit method).
12. List rendering using map - key prop cannot be use to render any data. it is reserved by react.
    index as a key - when > if list is static, no different values in list, if list is not filtered
13. Controlled component> have the value and handler to set the value
14. Life Cycle methods:
    > mounting - when component render or added to the DOM
	> Updating - when component re- render or after update the state or props
	> Unmounting - when component removed from the DOM
	> error handling
	
15. Mounting:
  > Constructor - initialize the state and binding the event, should not do ajax there
  > getDriverstateandprops - when the state depends over the props - it is used to set the state, should not do ajax there.
  > render - only required method in class component. read state and props and return jsx, should not do the update of state there, interact with dom or ajax
  >componentdidmount - calls only once immdiately after the component and all its children rendered to the dom, here we can interact with the dom and perform any ajax call to load 
                      data
  
   if any child component is there then first parent constructor, getDriverstateandprops, render will call then constructor, getDriverstateandprops, render, componentdidmount of
     child then componentdidmount of parent in last.
  
16. Updating:
   >getDriverstateandprops - when the state depends over the props - it is used to set the state, should not do ajax there.
   >shouldcomponentupdate - tell component should re render or not, basically for performance optimization.
   >render - only required method in class component. read state and props and return jsx, should not do the update of state there, interact with dom or ajax
   >takesnapshotbeforeupdate - call right before the changes from the virtual dom is to be reflected in the DOM
   >componentdidupdate - after the render is finish after the re render cycle. calls only once, can do ajax call.
 
 Unmounting - 
    > componentwillunmount - once the component removed from the dom. should not do setstate method. we can do here- cancelling any network request, remove any event handler.
 
 
 error handling
   > static getderivedstateerror()
   > componentdidcatch(error, info)
   
17. React.Fragment to replace the div tag in the jsx mostly in case of the table if td is in the child component

also in fragement we can add only key attribute.
 1st way
render(){
return(
<react.fragement>
content
<react.fragement/>
)
}

2nd way - here we cannot pass the key attribute.
 render(){
return(
<>
content
</>
)
}

18. PureComponent: not re-render unless there is any change - these are for class component
  >Check two type of comparision
   > Primitve and complex. 
   
   Pure component implements the shouldcomponentupdate method and return true or false if state change.
   always try to return new array or object after change in pure component because if there is change also then pure component will not re - render the component due to shallow comparision
   
19. Memo - same as pure component but this is for the functional component
    > export default React.memo(MemoComp);

  
20. Refs: 
    > this is used for fetching the value from the element.
	> set focus to any field.
   
   steps using normal ref
   1. create a variable and assign React.createRef();
       this.inputRef = React.createRef();
	   
	   2. in field pass that in attribute ref
	         <input type="text" ref={this.inputRef}></input>
			 
	 
	 3. in componentdidmount set focus on the field 
	   this.inputRef.current.focus();
	   
	 4.to get the value - this.inputRef.current.value
	 
	 steps using callback ref
	 
	1. create a null variable and then create function and pass the element on which we apply the ref in that and assign the variable which we created earlier with the element. 
	  this.cbRef = null;
    this.setCbRef = (element) => {
      this.cbRef = element;
    };
	
	2. pass the function in the field using ref attribute.
	      <input type="text" ref={this.setCbRef}></input>
		  
    3. in componentdidmount write this to set focus
	   if (this.cbRef) {
      this.cbRef.focus();
    }
	 
  we can call ref from parent to child 
  also from child to parent using React.forwardRef()
21. Portals:
    > Render the component outside the root component like in index.html
	
	import ReactDom from "react-dom";

function PortalDemo() {
  return ReactDom.createPortal(
    <h1>Portal Demo</h1>,
    document.getElementById("root-portal")
  );
}

	
22. Error Boundary:
 catch the error for constructor and state and component and the applicate can run and only the part affected which has error.
 
23. Higher order component:
    > to reuse the functionality in multiple component to reduce the duplicate code.
	Const ironMan = withSuit(tony stark) -- Example by Vishwas sir
	
	pass down the remaining props you have to pass props like this {...props}
	
	here we pass the component in the function and apply the functionality and pass that as props in the component and return a new component.
	
24. Render props: same as high order component to use reuse the functionality in multiple component
    > It is the propes who has the function and return the component and in these component we pass the props of parent component 
	
	sharing code whose value as a function
25. Context:
    > pass the props to the other component at lower lever from the app component directly
	
26. HTTP post and get

Hooks

1. Hooks enables to use the state in the functional component. it added in react 16.8
2. why need hooks - to not use 'this' keyword
                    to reuse the code without any change in existing one.
					
3. Rules for hooks:
   only call hooks at the top level
   dont call hooks inside the loops, nested function or in any condition

4. Syntax - of usestate -
              first we need to import usestate from react 
			  > import React, { useState } from "react";
			  
              for int value  -> const [count, setCount] = useState(0);
              
			  here count will be the state and setCount will be the method through will update the state value.
			  
			  > like this       <button onClick={() => setCount((previouscount) => previouscount + 1)}>
			  
			  > for object
			    > const [name, setName] = useState({ firstName: "", lastName: "" });
						 <input
				type="text"
				value={name.lastName}
				onChange={(e) => setName({ ...name, lastName: e.target.value })}
			  ></input>
			  
			  > for array - 
			 
5. useeffect hook - 
  
  >it replaces the componentdidmount, componentdidupdate, componentwillunmount methods of class component.


  useEffect(() => {
    console.log("Document Title changing");
    document.title = count;
  });

 >   here second parameter we can pass an array of state for which we want to look means run the useeffect only when particular state or props change

  useEffect(() => {
    console.log("Document Title changing");
    document.title = count;
  }, [count]);

  in this case it runs when application loads and when count state change.


 > if we want to call useEffect only once then pass the blank array as the second parameter.
 useEffect(() => {
    console.log("Document Title changing");
    document.title = count;
  }, [count]);


     > in class component we can do that in componentdidupdate method like this

	componentdidupdate(prevState, prevProps){
	condition..
	}  
	
   > if we want to remove any eventlistener then we can write the code in the function in useEffect and return that function
	 useEffect(() => {
    console.log("Document Title changing");
    document.title = count;
    return()=> {
	}
  }, [count]);


Node--
1. Run node program by command
   > node helloworld.js
2. Anonymous function:
   > function which do not have name
3. __filename, __dirname
4. setinterval to call the function on a particular time period again and again 
5. Server takes the request from the user 1 and take it to the db and it take 5 sec to execute so it take the request of other user
and come back to the user1 with his data after the request done using callback function.
6. Module: combination of file and we can export the method in the file using module.export.relay = relay;
   >to import the module in other file. require("./filename")
   
7. http.createrserver().listen(8888);
    > use to create server
8. Event with which we can call a event and the handler on it.
9. fs module is use to read the data from the file. - using readfile
10. Stream use to write and read date from the file. - using createread and write stream
11. Another way to read the file and write to destination using pipe.
readfilestream.pipe(outfilestream);
12. Entry point> app.js then request to start server> take request to router> then router take request to handler and show the response.


Python:
1. PyCharm is the ide to run the code
2. print() is for print and input() is used for taking the input from the user
3. int() simply convert the string to the int.
4. course = Python - change it into array 012345 - print(course[0]) will print p
   > course[0:3] will print cou and course[-1] will print e
5. Formatted strings
   > just like template literals easy to write the concatenated strings
   > eg. msg = f'{first_name} {last_name}  is a good boy'
   
   
weight = float(input('please enter weight(pounds) '))
print('weight in pounds ' + str(weight * .453492))

course = 'Python for beginners'
print(len(course))
print(course.upper())
print(course.find('o'))
print('Python' in course)

is_hot = False
is_cold = False

if is_hot:
    print("It's a hot day")
    print("Drink plenty of water")
elif is_cold:
    print("It's a cold day")
else:
    print("It's a lovely day")
print("Enjoy your day")


6. 10/3 get 3.3333 and 10 // 3 get 3
7. i = 1
while i <= 5:
    print(i)
    i = i + 1
print("done") - while loop syntax

8. """
string to 
write mutiple line
"""
9. for item in 'Python':
    >print(item)
    > range is the built in funtion to print the range of number
	> for item in range(10) - will print 1 to 9
    > range(5, 10) - will print 5 to 9
	> range(5, 10, 2) - will print 5, 7, 9

10. Nested loops:
for x in range(4):
    for y in range(3):
        print(f'({x}, {y})')
		
11. List
   > names = ['mosh', 'sarah', 'hari', 'abhi', 'sush']
   > print(names[2:]) - will print hari, abhi, sush

12. get the higest number in the list:
numbers = [1, 2, 3, 4, 5]
max = numbers[0]
for number in numbers:
    if number > max:
        max = number
print(max)

13. 2D list:
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

> print(matrix[2][2]) - output - 9
> for access all items in the matrix:

for row in matrix:
    for item in row:
        print(item)

14. List methods:

    > append() add the item at the end in the list.
    > insert(2, 33) add 33 at the 2 index

15. to remove the duplicates in the list:
numbers = [1, 3, 4, 5, 3, 6]
uniques = [];
for number in numbers:
    if number not in uniques:
        uniques.append(number)
print(uniques)

16. Tuples - these are imutables list:
   > numbers = (1, 2, 3);
   
17. Destructure the list: in python this is call unpacking
    > coordinates = (1, 2, 3)
    > x, y, z = coordinates
	
18. Dictonaries: as object in js

phone = input('phone ')
number_mapping = {
    "1": "one",
    "2": "two",
    "3": "three",
    "4": "four"
}
output = ""
for ch in phone:
    output += number_mapping.get(ch, "") + " ";
print(output)

19. Emojis in python:
message = input("> ")
words = message.split(' ')
emojis = {
    ":)": "😍"
}
output = ""
for word in words:
    output += emojis.get(word, word) + " "
print(output)

20: function:
	def - keyword to use for defining the function:

eg. we have to put 2 blank line after function end as per pep8(like es 6)
def greet_user():
    print("Hi User")


print("start")
greet_user()
print("end")	
	
21: Arguments: - actual value pass to the function 
    parameter: - variables pass at the time of defining the function
	